// üìÅ routes/auth.js
const express = require('express');
const jwt = require('jsonwebtoken');
const router = express.Router();
const admin = require('firebase-admin');
const { verifyToken } = require('../middlewares/verifyToken');
const { body, validationResult } = require('express-validator');

const db = admin.firestore();
const JWT_SECRET = 'your_jwt_secret_key'; // ‚ùó Replace this with env var in production

// Middleware ki·ªÉm tra role admin
const isAdmin = async (req, res, next) => {
    try {
        const userDoc = await db.collection('users').doc(req.user.uid).get();
        const userData = userDoc.data();

        if (userData && userData.role === 'admin') {
            next();
        } else {
            res.status(403).json({
                success: false,
                error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
            });
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            error: 'L·ªói server: ' + error.message
        });
    }
};

// Validation middleware
const validateRegister = [
    body('email').isEmail().withMessage('Email kh√¥ng h·ª£p l·ªá'),
    body('password').isLength({ min: 6 }).withMessage('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'),
    body('name').notEmpty().withMessage('T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
];

const validateLogin = [
    body('email').isEmail().withMessage('Email kh√¥ng h·ª£p l·ªá'),
    body('password').notEmpty().withMessage('M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
];

// ƒêƒÉng k√Ω user
router.post('/register', validateRegister, async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }

        const { email, password, name } = req.body;

        // T·∫°o user tr√™n Firebase Auth
        const userRecord = await admin.auth().createUser({
            email,
            password,
            displayName: name,
        });

        // L∆∞u th√¥ng tin user v√†o Firestore
        await db.collection('users').doc(userRecord.uid).set({
            email,
            name,
            role: 'user',
            createdAt: new Date().toISOString(),
        });

        res.status(201).json({
            success: true,
            message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
            user: {
                uid: userRecord.uid,
                email: userRecord.email,
                displayName: userRecord.displayName
            }
        });
    } catch (error) {
        console.error('Register error:', error);
        res.status(400).json({
            success: false,
            error: error.message
        });
    }
});

// ƒêƒÉng nh·∫≠p user
router.post('/login', validateLogin, async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }

        const { email, password } = req.body;

        // X√°c th·ª±c user v·ªõi Firebase Admin
        const userCredential = await admin.auth().getUserByEmail(email);

        // Ki·ªÉm tra role t·ª´ Firestore
        const userDoc = await db.collection('users').doc(userCredential.uid).get();
        const userData = userDoc.data();

        // T·∫°o custom token
        const customToken = await admin.auth().createCustomToken(userCredential.uid);

        res.status(200).json({
            success: true,
            token: customToken,
            user: {
                uid: userCredential.uid,
                email: userCredential.email,
                displayName: userCredential.displayName,
                role: userData.role
            }
        });
    } catch (error) {
        console.error('Login error:', error);
        res.status(401).json({
            success: false,
            error: 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: ' + error.message
        });
    }
});

// ƒêƒÉng nh·∫≠p admin
router.post('/admin/login', validateLogin, async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }

        const { email, password } = req.body;

        // X√°c th·ª±c user v·ªõi Firebase Admin
        const userCredential = await admin.auth().getUserByEmail(email);

        // Ki·ªÉm tra role t·ª´ Firestore
        const userDoc = await db.collection('users').doc(userCredential.uid).get();
        const userData = userDoc.data();

        if (!userData || userData.role !== 'admin') {
            return res.status(403).json({
                success: false,
                error: 'T√†i kho·∫£n kh√¥ng c√≥ quy·ªÅn admin'
            });
        }

        // T·∫°o custom token
        const customToken = await admin.auth().createCustomToken(userCredential.uid);

        res.status(200).json({
            success: true,
            token: customToken,
            user: {
                uid: userCredential.uid,
                email: userCredential.email,
                displayName: userCredential.displayName,
                role: 'admin'
            }
        });
    } catch (error) {
        console.error('Admin login error:', error);
        res.status(401).json({
            success: false,
            error: 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: ' + error.message
        });
    }
});

// Logout endpoint
router.post('/logout', verifyToken, async (req, res) => {
    try {
        await admin.auth().revokeRefreshTokens(req.user.uid);
        res.status(200).json({ message: 'Logged out successfully' });
    } catch (err) {
        console.error('Logout error:', err);
        res.status(500).json({ error: err.message });
    }
});

// Delete account endpoint
router.delete('/delete-account', verifyToken, async (req, res) => {
    try {
        const uid = req.user.uid;

        // X√≥a d·ªØ li·ªáu user t·ª´ Firestore
        await admin.firestore().collection('users').doc(uid).delete();

        // X√≥a gi·ªè h√†ng c·ªßa user
        await admin.firestore().collection('carts').doc(uid).delete();

        // X√≥a t√†i kho·∫£n Firebase Auth
        await admin.auth().deleteUser(uid);

        res.status(200).json({
            success: true,
            message: 'T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng'
        });
    } catch (err) {
        console.error('Delete account error:', err);
        res.status(500).json({
            success: false,
            error: err.message
        });
    }
});

module.exports = router;
